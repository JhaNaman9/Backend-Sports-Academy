openapi: 3.0.0
info:
  title: Sports Academy Management API
  description: API for managing sports academy operations, including students, coaches, subscriptions, and tournaments
  version: 1.0.0
  contact:
    email: info@sportsacademy.com
servers:
  - url: http://localhost:5000/api/v1
    description: Development Server
  - url: https://api.sportsacademy.com/api/v1
    description: Production Server

tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User management
  - name: Students
    description: Student profile management
  - name: Coaches
    description: Coach profile management
  - name: Subscriptions
    description: Subscription plans and active subscriptions
  - name: Content
    description: Content management for the academy
  - name: Tournaments
    description: Tournament management
  - name: Reports
    description: Reporting and analytics
  - name: AI Assistant
    description: Sports AI Assistant for queries

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        name:
          type: string
          description: User's full name
        email:
          type: string
          description: User's email address
        role:
          type: string
          enum: [admin, coach, student, user]
          description: User's role
        createdAt:
          type: string
          format: date-time
          description: Account creation date
      required:
        - name
        - email
        - password
        - role

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        token:
          type: string
          description: JWT Token
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    Error:
      type: object
      properties:
        status:
          type: string

paths:
  # Auth Routes
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  minLength: 8
                  description: Password must have at least 8 characters, including uppercase, lowercase and number
                passwordConfirm:
                  type: string
                  format: password
                  description: Must match password exactly
                role:
                  type: string
                  enum: [admin, coach, student, user]
                  default: student
                  description: User's role in the system
              required:
                - name
                - email
                - password
                - passwordConfirm
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                        description: JWT access token
                      refreshToken:
                        type: string
                        description: JWT refresh token
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Validation error
                  errors:
                    type: array
                    items:
                      type: string
